name: DevSecOps Pipeline - C# App

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

jobs:
  build-and-sast:
    runs-on: windows-latest
    name: Build and SAST with SonarCloud
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install SonarScanner
        run: |
          dotnet tool update dotnet-sonarscanner --tool-path .sonar

      - name: Restore dependencies
        run: dotnet restore

      - name: Run SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .sonar/dotnet-sonarscanner begin /k:"rocasatjmio_analisisc" /o:"rocasatjmio" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build --configuration Release --no-restore
          .sonar/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  sca-snyk:
    runs-on: ubuntu-latest
    name: SCA scan with Snyk
    needs: build-and-sast
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run Snyk scan
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  dast-zap:
    runs-on: ubuntu-latest
    name: DAST scan with OWASP ZAP
    needs: sca-snyk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare ZAP rules (optional)
        run: |
          mkdir -p .zap
          echo -e "10015\tIGNORE\t(No Cache-Control Header)" > .zap/rules.tsv
          echo -e "10021\tIGNORE\t(Missing X-Content-Type-Options Header)" >> .zap/rules.tsv

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://example.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html
